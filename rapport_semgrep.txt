                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 275 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                         
  [36m[22m[24m  app.py[0m
    ‚ùØ‚ù± python.django.security.audit.unvalidated-password.unvalidated-password
          The password on 'admin' is being set without validating the password. Call                          
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ if django.contrib.auth.password_validation.validate_password('adminpassword', user=admin):
              admin.set_password('adminpassword')                                                                  
           36‚îÜ admin.set_password('adminpassword')
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.django.security.audit.unvalidated-password.unvalidated-password
          The password on 'user' is being set without validating the password. Call                           
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ if django.contrib.auth.password_validation.validate_password(form.password.data, user=user):
              user.set_password(form.password.data)                                                                  
           72‚îÜ user.set_password(form.password.data)
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ if django.contrib.auth.password_validation.validate_password("motdepasseinitial", user=user):
              user.set_password("motdepasseinitial")                                                                  
          129‚îÜ user.set_password("motdepasseinitial")
   
    ‚ùØ‚ù± python.flask.security.audit.debug-enabled.debug-enabled
          Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will   
          leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug'
          using system environment variables.                                                                 
          Details: https://sg.run/dKrd                                                                        
                                                                                                              
          182‚îÜ app.run(debug=True)
                                      
  [36m[22m[24m  templates/base.html[0m
    ‚ùØ‚ù± html.security.audit.missing-integrity.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
            8‚îÜ <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
               rel="stylesheet">                                                                   
            ‚ãÆ‚îÜ----------------------------------------
           87‚îÜ <script                                                                                    
               src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script
               >                                                                                          
                                           
  [36m[22m[24m  templates/etudiants.html[0m
    ‚ùØ‚ù± python.django.security.django-no-csrf-token.django-no-csrf-token
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.
          Details: https://sg.run/N0Bp                                                                   
                                                                                                         
           88‚îÜ <form action="{{ url_for('delete_student', user_id=user.id) }}" method="POST"
               style="display: inline;">                                                    
           89‚îÜ     <button type="submit" class="btn btn-danger">Supprimer</button>
           90‚îÜ </form>
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/bandit/cli/config_generator.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          130‚îÜ fn_module = importlib.import_module(function.__module__)
                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/bandit/core/test_set.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           96‚îÜ genner = importlib.import_module(plugin.plugin.__module__)
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/bandit/plugins/trojansource.py[0m
    ‚ùØ‚ù± generic.unicode.security.bidi.contains-bidirectional-characters
          This code contains bidirectional (bidi) characters. While this is useful for support of right-to-  
          left languages such as Arabic or Hebrew, it can also be used to trick language parsers into        
          executing code in a manner that is different from how it is displayed in code editing and review   
          tools. If this is not what you were expecting, please review this code in an editor that can reveal
          hidden Unicode characters.                                                                         
          Details: https://sg.run/nK4r                                                                       
                                                                                                             
           22‚îÜ 4      if access_level != 'none‚ÄÆ‚Å¶': # Check if admin ‚Å©‚Å¶' and access_level != 'user
            ‚ãÆ‚îÜ----------------------------------------
           22‚îÜ 4      if access_level != 'none‚ÄÆ‚Å¶': # Check if admin ‚Å©‚Å¶' and access_level != 'user
            ‚ãÆ‚îÜ----------------------------------------
           22‚îÜ 4      if access_level != 'none‚ÄÆ‚Å¶': # Check if admin ‚Å©‚Å¶' and access_level != 'user
            ‚ãÆ‚îÜ----------------------------------------
           22‚îÜ 4      if access_level != 'none‚ÄÆ‚Å¶': # Check if admin ‚Å©‚Å¶' and access_level != 'user
                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/certifi/core.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python37.python37-compatibility-importlib2
          Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in 
          lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older
          Python versions.                                                                                    
          Details: https://sg.run/eL3y                                                                        
                                                                                                              
           16‚îÜ from importlib.resources import as_file, files
            ‚ãÆ‚îÜ----------------------------------------
           51‚îÜ from importlib.resources import path as get_path, read_text
                                                                                   
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/charset_normalizer/cd.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           34‚îÜ decoder = importlib.import_module(f"encodings.{iana_name}").IncrementalDecoder
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/charset_normalizer/utils.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          273‚îÜ importlib.import_module(f"encodings.{name}").IncrementalDecoder,
            ‚ãÆ‚îÜ----------------------------------------
          321‚îÜ decoder_a = importlib.import_module(f"encodings.{iana_name_a}").IncrementalDecoder
            ‚ãÆ‚îÜ----------------------------------------
          322‚îÜ decoder_b = importlib.import_module(f"encodings.{iana_name_b}").IncrementalDecoder
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/click/_termui_impl.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python36.python36-compatibility-Popen1
          the `errors` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/weBP                                   
                                                                         
          427‚îÜ c = subprocess.Popen(
          428‚îÜ     [cmd_absolute],
          429‚îÜ     shell=True,
          430‚îÜ     stdin=subprocess.PIPE,
          431‚îÜ     env=env,
          432‚îÜ     errors="replace",
          433‚îÜ     text=True,
          434‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ False
          429‚îÜ shell=True,
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ False
          552‚îÜ c = subprocess.Popen(f'{editor} "{filename}"', env=environ, shell=True)
                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/dnssec.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256()
          237‚îÜ dshash = hashlib.sha1()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(domain_encoded + salt_encoded)
          785‚îÜ digest = hashlib.sha1(domain_encoded + salt_encoded).digest()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(digest + salt_encoded)
          787‚îÜ digest = hashlib.sha1(digest + salt_encoded).digest()
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/dnssecalgs/dsa.py[0m
    ‚ùØ‚ù± python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/J9Qy                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SHA256
           16‚îÜ chosen_hash = hashes.SHA1()
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/dnssecalgs/rsa.py[0m
    ‚ùØ‚ù± python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
          Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.               
          Details: https://sg.run/eY88                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SHA256
           79‚îÜ chosen_hash = hashes.MD5()
   
    ‚ùØ‚ù± python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/J9Qy                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SHA256
           88‚îÜ chosen_hash = hashes.SHA1()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ SHA256
           97‚îÜ chosen_hash = hashes.SHA1()
                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/entropy.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256()
           37‚îÜ self.hash = hashlib.sha1()
                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdata.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          660‚îÜ mod = import_module(
          661‚îÜ     ".".join([_module_prefix, rdclass_text, rdtype_text])
          662‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          667‚îÜ mod = import_module(".".join([_module_prefix, "ANY", rdtype_text]))
                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/ANY/ISDN.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
           54‚îÜ subaddress = tokens[0].unescape().value
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/ANY/LOC.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          269‚îÜ value = tokens[0].unescape().value
            ‚ãÆ‚îÜ----------------------------------------
          274‚îÜ value = tokens[1].unescape().value
            ‚ãÆ‚îÜ----------------------------------------
          279‚îÜ value = tokens[2].unescape().value
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/ANY/URI.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
           53‚îÜ target = tok.get().unescape()
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/IN/APL.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          104‚îÜ item = token.unescape().value
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/IN/WKS.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
           69‚îÜ value = token.unescape().value
                                                                              
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/rdtypes/util.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          152‚îÜ rdtype = dns.rdatatype.from_text(token.unescape().value)
                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/dns/tokenizer.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          495‚îÜ token = self.get().unescape()
            ‚ãÆ‚îÜ----------------------------------------
          581‚îÜ token = self.get().unescape()
            ‚ãÆ‚îÜ----------------------------------------
          596‚îÜ token = self.get().unescape()
            ‚ãÆ‚îÜ----------------------------------------
          634‚îÜ token = self.get().unescape()
            ‚ãÆ‚îÜ----------------------------------------
          705‚îÜ token = self.get().unescape()
                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask/cli.py[0m
    ‚ùØ‚ù± python.lang.security.audit.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          1005‚îÜ eval(compile(f.read(), startup, "exec"), ctx)
                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask/config.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          212‚îÜ exec(compile(config_file.read(), filename, "exec"), d.__dict__)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask/json/tag.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          188‚îÜ return Markup(value)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask/sessions.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(string)
          285‚îÜ return hashlib.sha1(string)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask_wtf/csrf.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(os.urandom(64))
           53‚îÜ session[field_name] = hashlib.sha1(os.urandom(64)).hexdigest()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(os.urandom(64))
           58‚îÜ session[field_name] = hashlib.sha1(os.urandom(64)).hexdigest()
   
    ‚ùØ‚ù± python.django.security.injection.tainted-url-host.tainted-url-host
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server running this code can access. (This is called server-side request forgery,
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode
          the correct host.                                                                                   
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
          270‚îÜ good_referrer = f"https://{request.host}/"
   
    ‚ùØ‚ù± python.flask.security.injection.tainted-url-host.tainted-url-host
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server running this code can access. (This is called server-side request forgery,
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode
          the correct host.                                                                                   
          Details: https://sg.run/RXpK                                                                        
                                                                                                              
          270‚îÜ good_referrer = f"https://{request.host}/"
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask_wtf/form.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          119‚îÜ return Markup("\n".join(str(f) for f in hidden_fields(fields or self)))
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask_wtf/recaptcha/validators.py[0m
    ‚ùØ‚ù± python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           61‚îÜ http_response = http.urlopen(verify_server, data.encode("utf-8"))
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/flask_wtf/recaptcha/widgets.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
           20‚îÜ return Markup(html)
            ‚ãÆ‚îÜ----------------------------------------
           33‚îÜ return Markup(RECAPTCHA_TEMPLATE % (script, div_class, snippet))
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/importlib_metadata/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          189‚îÜ module = import_module(match.group('module'))
                                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/itsdangerous-2.2.0.dist-info/METADATA[0m
   ‚ùØ‚ùØ‚ù± generic.secrets.security.detected-jwt-token.detected-jwt-token
          JWT token detected          
          Details: https://sg.run/05N5
                                      
           44‚îÜ # eyJpZCI6NSwibmFtZSI6Iml0c2Rhbmdlcm91cyJ9.6YP6T0BaO67XP--9UzTrmurXSmg
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/itsdangerous/signer.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(string)
           45‚îÜ return hashlib.sha1(string)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/bccache.py[0m
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           41‚îÜ + pickle.dumps(bc_version, 2)
            ‚ãÆ‚îÜ----------------------------------------
           42‚îÜ + pickle.dumps((sys.version_info[0] << 24) | sys.version_info[1], 2)
            ‚ãÆ‚îÜ----------------------------------------
           73‚îÜ checksum = pickle.load(f)
   
    ‚ùØ‚ù± python.lang.security.audit.marshal.marshal-usage
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           79‚îÜ self.code = marshal.load(f)
   
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           89‚îÜ pickle.dump(self.checksum, f, 2)
   
    ‚ùØ‚ù± python.lang.security.audit.marshal.marshal-usage
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           90‚îÜ marshal.dump(self.code, f)
   
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ sha256(name.encode("utf-8"))
          156‚îÜ hash = sha1(name.encode("utf-8"))
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ sha256(source.encode("utf-8"))
          165‚îÜ return sha1(source.encode("utf-8")).hexdigest()
                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/debug.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          145‚îÜ exec(code, globals, locals)
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/environment.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1228‚îÜ exec(code, namespace)
   
    ‚ùØ‚ù± python.django.security.audit.xss.html-magic-method.html-magic-method
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
          1543‚îÜ def __html__(self) -> Markup:
          1544‚îÜ     return Markup(concat(self._body_stream))
   
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          1544‚îÜ return Markup(concat(self._body_stream))
                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/ext.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          176‚îÜ rv = Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          197‚îÜ rv = Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          213‚îÜ rv = Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          238‚îÜ rv = Markup(rv)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/filters.py[0m
    ‚ùØ‚ù± python.django.security.audit.xss.html-magic-method.html-magic-method
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
           40‚îÜ def __html__(self) -> str:
           41‚îÜ     pass
   
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          316‚îÜ rv = Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          820‚îÜ rv = Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          851‚îÜ indention = Markup(indention)
            ‚ãÆ‚îÜ----------------------------------------
          1056‚îÜ return Markup(str(value)).striptags()
            ‚ãÆ‚îÜ----------------------------------------
          1377‚îÜ return Markup(value)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/loaders.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          323‚îÜ import_module(package_name)
   
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ sha256(name.encode("utf-8"))
          661‚îÜ return "tmpl_" + sha1(name.encode("utf-8")).hexdigest()
                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/nodes.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          619‚îÜ return Markup(self.data)
            ‚ãÆ‚îÜ----------------------------------------
          1091‚îÜ return Markup(self.expr.as_const(eval_ctx))
            ‚ãÆ‚îÜ----------------------------------------
          1112‚îÜ return Markup(expr)
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/runtime.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          375‚îÜ return Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          389‚îÜ return Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          776‚îÜ return Markup(rv)
            ‚ãÆ‚îÜ----------------------------------------
          787‚îÜ rv = Markup(rv)
   
    ‚ùØ‚ù± python.django.security.audit.xss.html-magic-method.html-magic-method
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
          988‚îÜ def __html__(self) -> str:
          989‚îÜ     return str(self)
                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/jinja2/utils.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          403‚îÜ return markupsafe.Markup(
          404‚îÜ     "\n".join(f"<p>{markupsafe.escape(x)}</p>" for x in result)
          405‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          668‚îÜ return markupsafe.Markup(
          669‚îÜ     dumps(obj, **kwargs)
          670‚îÜ     .replace("<", "\\u003c")
          671‚îÜ     .replace(">", "\\u003e")
          672‚îÜ     .replace("&", "\\u0026")
          673‚îÜ     .replace("'", "\\u0027")
          674‚îÜ )
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/markupsafe/__init__.py[0m
    ‚ùØ‚ù± python.django.security.audit.xss.html-magic-method.html-magic-method
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
           10‚îÜ def __html__(self) -> str:
           11‚îÜ     pass
            ‚ãÆ‚îÜ----------------------------------------
           78‚îÜ def __html__(self) -> "te.Self":
           79‚îÜ     return self
   
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          197‚îÜ return self.__class__(value).unescape()
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/cache.py[0m
    ‚ùØ‚ù± python.lang.security.audit.sha224-hash.sha224-hash
          This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies.
          Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and    
          security.                                                                                           
          Details: https://sg.run/Db1Yv                                                                       
                                                                                                              
           29‚îÜ return hashlib.sha224(s.encode("ascii")).hexdigest()
                                                                                             
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/commands/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          114‚îÜ module = importlib.import_module(module_path)
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/commands/configuration.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
          Found 'subprocess' function 'check_call' with 'shell=True'. This is dangerous because this call will
          spawn the command using a shell process. Doing so propagates current shell settings and variables,  
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.    
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ False
          239‚îÜ subprocess.check_call(f'{editor} "{fname}"', shell=True)
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/commands/search.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            5‚îÜ import xmlrpc.client
                                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/network/auth.py[0m
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Getting credentials from keyring 
          for %s" being logged. This may lead to secret credentials being exposed. Make sure that the logger
          is not logging  sensitive information.                                                            
          Details: https://sg.run/ydNx                                                                      
                                                                                                            
           86‚îÜ logger.debug("Getting credentials from keyring for %s", url)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Getting password from keyring for
          %s" being logged. This may lead to secret credentials being exposed. Make sure that the logger is 
          not logging  sensitive information.                                                               
          Details: https://sg.run/ydNx                                                                      
                                                                                                            
           93‚îÜ logger.debug("Getting password from keyring for %s", url)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Found credentials in url for %s"
          being logged. This may lead to secret credentials being exposed. Make sure that the logger is not
          logging  sensitive information.                                                                  
          Details: https://sg.run/ydNx                                                                     
                                                                                                           
          351‚îÜ logger.debug("Found credentials in url for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Found credentials in index url for
          %s" being logged. This may lead to secret credentials being exposed. Make sure that the logger is  
          not logging  sensitive information.                                                                
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          367‚îÜ logger.debug("Found credentials in index url for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Found credentials in netrc for %s"
          being logged. This may lead to secret credentials being exposed. Make sure that the logger is not  
          logging  sensitive information.                                                                    
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          374‚îÜ logger.debug("Found credentials in netrc for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "Found credentials in keyring for
          %s" being logged. This may lead to secret credentials being exposed. Make sure that the logger is
          not logging  sensitive information.                                                              
          Details: https://sg.run/ydNx                                                                     
                                                                                                           
          387‚îÜ logger.debug("Found credentials in keyring for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
          Detected a python logger call with a potential hardcoded secret "401 Error, Credentials not correct
          for %s" being logged. This may lead to secret credentials being exposed. Make sure that the logger 
          is not logging  sensitive information.                                                             
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          546‚îÜ logger.warning(
          547‚îÜ     "401 Error, Credentials not correct for %s",
          548‚îÜ     resp.request.url,
          549‚îÜ )
                                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/network/xmlrpc.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            6‚îÜ import xmlrpc.client
            ‚ãÆ‚îÜ----------------------------------------
           14‚îÜ from xmlrpc.client import _HostType, _Marshallable
                                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/self_outdated_check.py[0m
    ‚ùØ‚ù± python.lang.security.audit.sha224-hash.sha224-hash
          This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies.
          Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and    
          security.                                                                                           
          Details: https://sg.run/Db1Yv                                                                       
                                                                                                              
           42‚îÜ name = hashlib.sha224(key_bytes).hexdigest()
                                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/utils/compat.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python37.python37-compatibility-importlib2
          Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in 
          lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older
          Python versions.                                                                                    
          Details: https://sg.run/eL3y                                                                        
                                                                                                              
            4‚îÜ import importlib.resources
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/utils/subprocess.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python36.python36-compatibility-Popen1
          the `errors` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/weBP                                   
                                                                         
          126‚îÜ proc = subprocess.Popen(
          127‚îÜ     # Convert HiddenText objects to the underlying str.
          128‚îÜ     reveal_command_args(cmd),
          129‚îÜ     stdin=subprocess.PIPE,
          130‚îÜ     stdout=subprocess.PIPE,
          131‚îÜ     stderr=subprocess.STDOUT if not stdout_only else subprocess.PIPE,
          132‚îÜ     cwd=cwd,
          133‚îÜ     env=env,
          134‚îÜ     errors="backslashreplace",
          135‚îÜ )
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_internal/utils/unpacking.py[0m
   ‚ùØ‚ùØ‚ù± trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled
          by an attacker                                                                                    
          Details: https://sg.run/2RLD                                                                      
                                                                                                            
          179‚îÜ tar = tarfile.open(filename, mode, encoding="utf-8")  # type: ignore
          180‚îÜ try:
          181‚îÜ     leading = has_leading_dir([member.name for member in tar.getmembers()])
          182‚îÜ
          183‚îÜ     # PEP 706 added `tarfile.data_filter`, and made some other changes to
          184‚îÜ     # Python's tarfile module (see below). The features were backported to
          185‚îÜ     # security releases.
          186‚îÜ     try:
          187‚îÜ         data_filter = tarfile.data_filter
          188‚îÜ     except AttributeError:
             [hid 60 additional lines, adjust with --max-lines-per-finding] 
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/cachecontrol/_cmd.py[0m
     ‚ù± python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
          Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
          Details: https://sg.run/DoBY                                                                 
                                                                                                       
           33‚îÜ sess.mount("http://", adapter)
                                                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py[0m
    ‚ùØ‚ù± python.lang.security.audit.sha224-hash.sha224-hash
          This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies.
          Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and    
          security.                                                                                           
          Details: https://sg.run/Db1Yv                                                                       
                                                                                                              
           96‚îÜ return hashlib.sha224(x.encode()).hexdigest()
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/certifi/core.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python37.python37-compatibility-importlib2
          Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in 
          lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older
          Python versions.                                                                                    
          Details: https://sg.run/eL3y                                                                        
                                                                                                              
           16‚îÜ from importlib.resources import as_file, files
            ‚ãÆ‚îÜ----------------------------------------
           51‚îÜ from importlib.resources import path as get_path, read_text
                                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/distlib/compat.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           42‚îÜ import xmlrpclib
            ‚ãÆ‚îÜ----------------------------------------
           81‚îÜ import xmlrpc.client as xmlrpclib
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/distlib/util.py[0m
    ‚ùØ‚ù± python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          1572‚îÜ self._connection = host, httplib.HTTPSConnection(h, None, **kwargs)
                                                                                                     
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/packaging/licenses/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          100‚îÜ invalid = eval(python_expression, globals(), locals())
                                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pkg_resources/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          168‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          168‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          175‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
            ‚ãÆ‚îÜ----------------------------------------
          175‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
   
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1714‚îÜ exec(code, namespace, namespace)
            ‚ãÆ‚îÜ----------------------------------------
          1725‚îÜ exec(script_code, namespace, namespace)
   
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          2468‚îÜ importlib.import_module(packageName)
                                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pygments/formatters/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          103‚îÜ exec(f.read(), custom_namespace)
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pygments/lexers/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          154‚îÜ exec(f.read(), custom_namespace)
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pygments/unistring.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           83‚îÜ return ''.join(globals()[cat] for cat in args)
            ‚ãÆ‚îÜ----------------------------------------
           90‚îÜ return ''.join(globals()[cat] for cat in newcats)
                                                                                                              
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pyproject_hooks/_in_process/__init__.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python37.python37-compatibility-importlib2
          Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in 
          lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older
          Python versions.                                                                                    
          Details: https://sg.run/eL3y                                                                        
                                                                                                              
            7‚îÜ import importlib.resources as resources
                                                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           70‚îÜ obj = import_module(mod_path)
   
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          367‚îÜ hook = globals()[hook_name]
                                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/requests/auth.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(x)
          156‚îÜ return hashlib.sha1(x).hexdigest()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(s)
          205‚îÜ cnonce = hashlib.sha1(s).hexdigest()[:16]
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/rich/style.py[0m
    ‚ùØ‚ù± python.lang.security.audit.marshal.marshal-usage
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          191‚îÜ self._meta = None if meta is None else dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          242‚îÜ style._meta = dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          475‚îÜ return {} if self._meta is None else cast(Dict[str, Any], loads(self._meta))
            ‚ãÆ‚îÜ----------------------------------------
          751‚îÜ new_style._meta = dumps({**self.meta, **style.meta})
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/truststore/_api.py[0m
    ‚ùØ‚ù± python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
          161‚îÜ return self._ctx.set_ciphers(__cipherlist)
                                                                                                   
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py[0m
    ‚ùØ‚ù± python.lang.security.audit.weak-ssl-version.weak-ssl-version
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
           99‚îÜ ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,
            ‚ãÆ‚îÜ----------------------------------------
          103‚îÜ _openssl_versions[ssl.PROTOCOL_SSLv3] = OpenSSL.SSL.SSLv3_METHOD
            ‚ãÆ‚îÜ----------------------------------------
          106‚îÜ _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD
                                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/urllib3/contrib/securetransport.py[0m
    ‚ùØ‚ù± python.lang.security.audit.weak-ssl-version.weak-ssl-version
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          162‚îÜ _protocol_to_min_max[ssl.PROTOCOL_SSLv2] = (
            ‚ãÆ‚îÜ----------------------------------------
          167‚îÜ _protocol_to_min_max[ssl.PROTOCOL_SSLv3] = (
            ‚ãÆ‚îÜ----------------------------------------
          172‚îÜ _protocol_to_min_max[ssl.PROTOCOL_TLSv1] = (
            ‚ãÆ‚îÜ----------------------------------------
          177‚îÜ _protocol_to_min_max[ssl.PROTOCOL_TLSv1_1] = (
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pip/_vendor/urllib3/util/ssl_.py[0m
    ‚ùØ‚ù± python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          182‚îÜ return wrap_socket(socket, ciphers=self.ciphers, **kwargs)
   
    ‚ùØ‚ù± python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
          301‚îÜ context.set_ciphers(ciphers or DEFAULT_CIPHERS)
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pkg_resources/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          146‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          146‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
   
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1462‚îÜ exec(code, namespace, namespace)
            ‚ãÆ‚îÜ----------------------------------------
          1469‚îÜ exec(script_code, namespace, namespace)
                                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pygments/formatters/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          103‚îÜ exec(f.read(), custom_namespace)
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pygments/lexers/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          154‚îÜ exec(f.read(), custom_namespace)
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pygments/lexers/_lua_builtins.py[0m
    ‚ùØ‚ù± python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
          Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://'
          instead.                                                                                       
          Details: https://sg.run/oxB9                                                                   
                                                                                                         
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ urlopen('https://www.lua.org/manual/')
          225‚îÜ f = urlopen('http://www.lua.org/manual/')
   
    ‚ùØ‚ù± python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          233‚îÜ f = urlopen(f'http://www.lua.org/manual/{version}/')
                                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pygments/lexers/_php_builtins.py[0m
    ‚ùØ‚ù± python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
          Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://'
          instead.                                                                                           
          Details: https://sg.run/1Zqw                                                                       
                                                                                                             
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ PHP_MANUAL_URL     = 'https://us3.php.net/distributions/manual/php_manual_en.tar.gz'
              PHP_MANUAL_DIR     = './php-chunked-xhtml/' PHP_REFERENCE_GLOB = 'ref.*'                       
              PHP_FUNCTION_RE    = r'<a href="function\..*?\.html">(.*?)</a>' PHP_MODULE_RE                  
              = '<title>(.*?) Functions</title>'  def get_php_functions(): function_re =                     
              re.compile(PHP_FUNCTION_RE) module_re   = re.compile(PHP_MODULE_RE) modules     =              
              {}  for file in get_php_references(): module = '' with open(file, encoding='utf-8')            
              as f: for line in f: if not module: search = module_re.search(line) if search:                 
              module = search.group(1) modules[module] = []  elif 'href="function.' in line: for             
              match in function_re.finditer(line): fn = match.group(1) if '¬ª' not in fn and '¬´'              
              not in fn and \ '::' not in fn and '\\' not in fn and \ fn not in modules[module]:             
              modules[module].append(fn)  if module: # These are dummy manual pages, not actual              
              functions if module == 'Filesystem': modules[module].remove('delete')  if not                  
              modules[module]: del modules[module]  for key in modules: modules[key] =                       
              tuple(modules[key]) return modules  def get_php_references(): download =                       
              urlretrieve(PHP_MANUAL_URL) with tarfile.open(download[0]) as tar: tar.extractall()            
              yield from glob.glob(f"{PHP_MANUAL_DIR}{PHP_REFERENCE_GLOB}")                                  
              os.remove(download[0])                                                                         
          3257‚îÜ PHP_MANUAL_URL     = 'http://us3.php.net/distributions/manual/php_manual_en.tar.gz'
          3258‚îÜ PHP_MANUAL_DIR     = './php-chunked-xhtml/'
          3259‚îÜ PHP_REFERENCE_GLOB = 'ref.*'
          3260‚îÜ PHP_FUNCTION_RE    = r'<a href="function\..*?\.html">(.*?)</a>'
          3261‚îÜ PHP_MODULE_RE      = '<title>(.*?) Functions</title>'
          3262‚îÜ
          3263‚îÜ def get_php_functions():
          3264‚îÜ     function_re = re.compile(PHP_FUNCTION_RE)
          3265‚îÜ     module_re   = re.compile(PHP_MODULE_RE)
          3266‚îÜ     modules     = {}
             [hid 37 additional lines, adjust with --max-lines-per-finding] 
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ urlretrieve(PHP_MANUAL_URL)
          3299‚îÜ download = urlretrieve(PHP_MANUAL_URL)
   
   ‚ùØ‚ùØ‚ù± trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled
          by an attacker                                                                                    
          Details: https://sg.run/2RLD                                                                      
                                                                                                            
          3300‚îÜ with tarfile.open(download[0]) as tar:
          3301‚îÜ     tar.extractall()
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/pygments/unistring.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           83‚îÜ return ''.join(globals()[cat] for cat in args)
            ‚ãÆ‚îÜ----------------------------------------
           90‚îÜ return ''.join(globals()[cat] for cat in newcats)
                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/requests/auth.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(x)
          156‚îÜ return hashlib.sha1(x).hexdigest()
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(s)
          205‚îÜ cnonce = hashlib.sha1(s).hexdigest()[:16]
                                                                             
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/requests/compat.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           36‚îÜ chardet = importlib.import_module(lib)
                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/rich/style.py[0m
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          196‚îÜ self._meta = None if meta is None else dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          247‚îÜ style._meta = dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          471‚îÜ return {} if self._meta is None else cast(Dict[str, Any], loads(self._meta))
            ‚ãÆ‚îÜ----------------------------------------
          747‚îÜ new_style._meta = dumps({**self.meta, **style.meta})
                                                                                   
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/build_meta.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          142‚îÜ exec(compile(code, __file__, 'exec'), locals())
                                                                                          
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/command/bdist_egg.py[0m
    ‚ùØ‚ù± python.lang.security.audit.marshal.marshal-usage
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          422‚îÜ code = marshal.load(f)
                                                                                             
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/command/easy_install.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1076‚îÜ if locals()[name]:
            ‚ãÆ‚îÜ----------------------------------------
          1080‚îÜ f.write('\n'.join(locals()[name]) + '\n')
                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/config.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          349‚îÜ module = import_module(module_name)
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/depends.py[0m
    ‚ùØ‚ù± python.lang.security.audit.marshal.marshal-usage
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          112‚îÜ code = marshal.load(f)
   
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          172‚îÜ del globals()[name]
                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/launch.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           31‚îÜ exec(code, namespace)
                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/monkey.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          151‚îÜ mod = import_module(mod_name)
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/package_index.py[0m
    ‚ùØ‚ù± python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          1113‚îÜ return urllib.request.urlopen(url)
                                                                                
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/sandbox.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           45‚îÜ exec(code, globals, locals)
   
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          107‚îÜ return pickle.dumps(type), pickle.dumps(exc)
            ‚ãÆ‚îÜ----------------------------------------
          107‚îÜ return pickle.dumps(type), pickle.dumps(exc)
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/setuptools/ssl_support.py[0m
    ‚ùØ‚ù± python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          194‚îÜ self.sock = ssl.wrap_socket(
          195‚îÜ     sock, cert_reqs=ssl.CERT_REQUIRED, ca_certs=self.ca_bundle
          196‚îÜ )
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/mssql/base.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          3195‚îÜ cursor.execute(f"SET TRANSACTION ISOLATION LEVEL {level}")
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          3195‚îÜ cursor.execute(f"SET TRANSACTION ISOLATION LEVEL {level}")
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          3204‚îÜ cursor.execute(
          3205‚îÜ     (
          3206‚îÜ         "SELECT name FROM {} WHERE name IN "
          3207‚îÜ         "('dm_exec_sessions', 'dm_pdw_nodes_exec_sessions')"
          3208‚îÜ     ).format(view_name)
          3209‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          3204‚îÜ cursor.execute(
          3205‚îÜ     (
          3206‚îÜ         "SELECT name FROM {} WHERE name IN "
          3207‚îÜ         "('dm_exec_sessions', 'dm_pdw_nodes_exec_sessions')"
          3208‚îÜ     ).format(view_name)
          3209‚îÜ )
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          3219‚îÜ cursor.execute(
          3220‚îÜ     """
          3221‚îÜ         SELECT CASE transaction_isolation_level
          3222‚îÜ         WHEN 0 THEN NULL
          3223‚îÜ         WHEN 1 THEN 'READ UNCOMMITTED'
          3224‚îÜ         WHEN 2 THEN 'READ COMMITTED'
          3225‚îÜ         WHEN 3 THEN 'REPEATABLE READ'
          3226‚îÜ         WHEN 4 THEN 'SERIALIZABLE'
          3227‚îÜ         WHEN 5 THEN 'SNAPSHOT' END
          3228‚îÜ         AS TRANSACTION_ISOLATION_LEVEL
             [hid 6 additional lines, adjust with --max-lines-per-finding] 
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          3219‚îÜ cursor.execute(
          3220‚îÜ     """
          3221‚îÜ         SELECT CASE transaction_isolation_level
          3222‚îÜ         WHEN 0 THEN NULL
          3223‚îÜ         WHEN 1 THEN 'READ UNCOMMITTED'
          3224‚îÜ         WHEN 2 THEN 'READ COMMITTED'
          3225‚îÜ         WHEN 3 THEN 'REPEATABLE READ'
          3226‚îÜ         WHEN 4 THEN 'SERIALIZABLE'
          3227‚îÜ         WHEN 5 THEN 'SNAPSHOT' END
          3228‚îÜ         AS TRANSACTION_ISOLATION_LEVEL
             [hid 6 additional lines, adjust with --max-lines-per-finding] 
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/mysql/base.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          2792‚îÜ cursor.execute(f"SET SESSION TRANSACTION ISOLATION LEVEL {level}")
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          2792‚îÜ cursor.execute(f"SET SESSION TRANSACTION ISOLATION LEVEL {level}")
                                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/mysql/mysqldb.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          180‚îÜ cursor.execute("SET NAMES %s" % charset_name)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          180‚îÜ cursor.execute("SET NAMES %s" % charset_name)
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          1235‚îÜ cursor.execute(f"ALTER SESSION SET ISOLATION_LEVEL={level}")
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          1235‚îÜ cursor.execute(f"ALTER SESSION SET ISOLATION_LEVEL={level}")
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/oracle/provision.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          209‚îÜ cursor.execute("ALTER SESSION SET CURRENT_SCHEMA=%s" % schema_name)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          209‚îÜ cursor.execute("ALTER SESSION SET CURRENT_SCHEMA=%s" % schema_name)
                                                                                                   
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/postgresql/pg8000.py[0m
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          356‚îÜ self.cursor.execute(op, args, stream=stream)
            ‚ãÆ‚îÜ----------------------------------------
          364‚îÜ self.cursor.execute("FETCH FORWARD 1 FROM " + self.ident)
            ‚ãÆ‚îÜ----------------------------------------
          371‚îÜ self.cursor.execute(
          372‚îÜ     "FETCH FORWARD " + str(int(num)) + " FROM " + self.ident
          373‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          377‚îÜ self.cursor.execute("FETCH FORWARD ALL FROM " + self.ident)
            ‚ãÆ‚îÜ----------------------------------------
          381‚îÜ self.cursor.execute("CLOSE " + self.ident)
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          549‚îÜ cursor.execute(
          550‚îÜ     "SET SESSION CHARACTERISTICS AS TRANSACTION %s"
          551‚îÜ     % ("READ ONLY" if value else "READ WRITE")
          552‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          549‚îÜ cursor.execute(
          550‚îÜ     "SET SESSION CHARACTERISTICS AS TRANSACTION %s"
          551‚îÜ     % ("READ ONLY" if value else "READ WRITE")
          552‚îÜ )
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          570‚îÜ cursor.execute(
          571‚îÜ     "SET SESSION CHARACTERISTICS AS TRANSACTION %s"
          572‚îÜ     % ("DEFERRABLE" if value else "NOT DEFERRABLE")
          573‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          570‚îÜ cursor.execute(
          571‚îÜ     "SET SESSION CHARACTERISTICS AS TRANSACTION %s"
          572‚îÜ     % ("DEFERRABLE" if value else "NOT DEFERRABLE")
          573‚îÜ )
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          590‚îÜ cursor.execute(
          591‚îÜ     f"""SET CLIENT_ENCODING TO '{
          592‚îÜ         client_encoding.replace("'", "''")
          593‚îÜ     }'"""
          594‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          590‚îÜ cursor.execute(
          591‚îÜ     f"""SET CLIENT_ENCODING TO '{
          592‚îÜ         client_encoding.replace("'", "''")
          593‚îÜ     }'"""
          594‚îÜ )
                                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/postgresql/provision.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           89‚îÜ cursor.execute("SET SESSION search_path='%s'" % schema_name)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           89‚îÜ cursor.execute("SET SESSION search_path='%s'" % schema_name)
                                                                                             
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/sqlite/base.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          2206‚îÜ cursor.execute(f"PRAGMA read_uncommitted = {isolation_level}")
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          2206‚îÜ cursor.execute(f"PRAGMA read_uncommitted = {isolation_level}")
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/sqlite/provision.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          119‚îÜ dbapi_connection.execute(
          120‚îÜ     f'ATTACH DATABASE "{attach_path}" AS test_schema'
          121‚îÜ )
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          119‚îÜ dbapi_connection.execute(
          120‚îÜ     f'ATTACH DATABASE "{attach_path}" AS test_schema'
          121‚îÜ )
                                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/dialects/sqlite/pysqlcipher.py[0m
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          139‚îÜ cursor.execute('pragma key="%s"' % passphrase)
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          139‚îÜ cursor.execute('pragma key="%s"' % passphrase)
   
    ‚ùØ‚ù± python.lang.security.audit.formatted-sql-query.formatted-sql-query
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          143‚îÜ cursor.execute('pragma %s="%s"' % (prag, value))
   
   ‚ùØ‚ùØ‚ù± python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          143‚îÜ cursor.execute('pragma %s="%s"' % (prag, value))
                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/exc.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          665‚îÜ if name in glob and issubclass(glob[name], DBAPIError):
            ‚ãÆ‚îÜ----------------------------------------
          666‚îÜ cls = glob[name]
                                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/ext/serializer.py[0m
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           94‚îÜ id_ = "mapper:" + b64encode(pickle.dumps(obj.class_))
            ‚ãÆ‚îÜ----------------------------------------
           98‚îÜ + b64encode(pickle.dumps(obj.parent.class_))
            ‚ãÆ‚îÜ----------------------------------------
          105‚îÜ pickle.dumps(obj._annotations["parententity"].class_)
            ‚ãÆ‚îÜ----------------------------------------
          150‚îÜ cls = pickle.loads(b64decode(clsarg))
            ‚ãÆ‚îÜ----------------------------------------
          153‚îÜ cls = pickle.loads(b64decode(args))
            ‚ãÆ‚îÜ----------------------------------------
          156‚îÜ cls = pickle.loads(b64decode(args))
            ‚ãÆ‚îÜ----------------------------------------
          160‚îÜ cls = pickle.loads(b64decode(mapper))
                                                                                        
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/orm/clsregistry.py[0m
    ‚ùØ‚ù± python.lang.security.audit.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          533‚îÜ x = eval(self.arg, globals(), self._dict)
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/orm/instrumentation.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          744‚îÜ exec(func_text, env)
                                                                                      
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/sql/coercions.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1396‚îÜ impl = globals()[name](cls)
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/sql/lambdas.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          811‚îÜ _bound_value = self._roll_down_to_literal(fn.__globals__[name])
            ‚ãÆ‚îÜ----------------------------------------
          913‚îÜ wrapper = tracker_instrumented_fn.__globals__[name]
            ‚ãÆ‚îÜ----------------------------------------
          915‚îÜ current_fn.__globals__[name], result
            ‚ãÆ‚îÜ----------------------------------------
          1174‚îÜ value = fn.__globals__[name]
   
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1264‚îÜ exec(code, vars_, vars_)
                                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/testing/plugin/pytestplugin.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          621‚îÜ exec(code, env)
                                                                                                   
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/testing/suite/test_dialect.py[0m
    ‚ùØ‚ù± python.lang.security.audit.non-literal-import.non-literal-import
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           68‚îÜ importlib.import_module("sqlalchemy.dialects.%s" % d)
                                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/testing/suite/test_insert.py[0m
    ‚ùØ‚ù± python.sqlalchemy.performance.performance-improvements.len-all-count
          Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy
          method is performed server-side.                                                                  
          Details: https://sg.run/4y8g                                                                      
                                                                                                            
          218‚îÜ eq_(len(r.all()), 1)
            ‚ãÆ‚îÜ----------------------------------------
          232‚îÜ eq_(len(r.all()), 3)
                                                                                     
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/testing/util.py[0m
    ‚ùØ‚ù± python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           63‚îÜ yield nt(pickle.loads, lambda d: pickle.dumps(d, protocol))
                                                                                         
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          419‚îÜ exec(code, env)
            ‚ãÆ‚îÜ----------------------------------------
          1053‚îÜ exec(py, env)
            ‚ãÆ‚îÜ----------------------------------------
          2044‚îÜ exec(code, env)
                                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/util/preloaded.py[0m
    ‚ùØ‚ù± python.lang.security.dangerous-globals-use.dangerous-globals-use
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          140‚îÜ self.__dict__[key] = globals()[key] = sys.modules[module]
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/sqlalchemy/util/typing.py[0m
    ‚ùØ‚ù± python.lang.security.audit.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          274‚îÜ annotation = eval(expression, cls_namespace, locals_)
            ‚ãÆ‚îÜ----------------------------------------
          276‚îÜ annotation = eval(expression, base_globals, locals_)
                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/typing_extensions.py[0m
    ‚ùØ‚ù± python.lang.security.audit.eval-detected.eval-detected
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          4284‚îÜ value if not isinstance(value, str) else eval(value, globals, locals)
            ‚ãÆ‚îÜ----------------------------------------
          4376‚îÜ value = eval(code, globals, locals)
                                                                                              
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/urllib3/contrib/emscripten/fetch.py[0m
   ‚ùØ‚ùØ‚ù± python.lang.compatibility.python37.python37-compatibility-importlib2
          Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in 
          lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older
          Python versions.                                                                                    
          Details: https://sg.run/eL3y                                                                        
                                                                                                              
           31‚îÜ from importlib.resources import files
                                                                                       
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/urllib3/contrib/pyopenssl.py[0m
    ‚ùØ‚ù± python.lang.security.audit.weak-ssl-version.weak-ssl-version
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
           73‚îÜ ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD
                                                                               
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/urllib3/util/ssl_.py[0m
    ‚ùØ‚ù± python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
          305‚îÜ context.set_ciphers(ciphers)
                                                                                     
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/debug/__init__.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256(f"{pin} added salt".encode("utf-8", "replace"))
           45‚îÜ return hashlib.sha1(f"{pin} added salt".encode("utf-8", "replace")).hexdigest()[:12]
            ‚ãÆ‚îÜ----------------------------------------
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ hashlib.sha256()
          196‚îÜ h = hashlib.sha1()
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/debug/console.py[0m
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          177‚îÜ exec(code, self.locals)
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/debug/shared/debugger.js[0m
   ‚ùØ‚ùØ‚ù± javascript.browser.security.insecure-document-method.insecure-document-method
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          273‚îÜ tmp.innerHTML = data;
                                                                           
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/http.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ sha256(data)
          977‚îÜ return sha1(data).hexdigest()
                                                                                            
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/middleware/http_proxy.py[0m
    ‚ùØ‚ù± python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          151‚îÜ con = client.HTTPSConnection(
          152‚îÜ     host,
          153‚îÜ     target.port or 443,
          154‚îÜ     timeout=self.timeout,
          155‚îÜ     context=opts["ssl_context"],
          156‚îÜ )
                                                                                    
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/werkzeug/routing/rules.py[0m
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
          Details: https://sg.run/GWyz                                                                     
                                                                                                           
          437‚îÜ If ``True``, this rule is only matches for WebSocket (``ws://``,
   
    ‚ùØ‚ù± python.lang.security.audit.exec-detected.exec-detected
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          737‚îÜ exec(code, globs, locs)
                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/wtforms/csrf/session.py[0m
    ‚ùØ‚ù± python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           ‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ sha256(os.urandom(64))
           46‚îÜ session["csrf"] = sha1(os.urandom(64)).hexdigest()
                                                                                 
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/wtforms/fields/core.py[0m
    ‚ùØ‚ù± python.django.security.audit.xss.html-magic-method.html-magic-method
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
          155‚îÜ def __html__(self):
          156‚îÜ     """
          157‚îÜ     Returns a HTML representation of the field. For more powerful rendering,
          158‚îÜ     see the :meth:`__call__` method.
          159‚îÜ     """
          160‚îÜ     return self()
            ‚ãÆ‚îÜ----------------------------------------
          443‚îÜ def __html__(self):
          444‚îÜ     return self()
   
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          454‚îÜ return Markup(f"<label {attributes}>{text}</label>")
                                                                                  
  [36m[22m[24m  venv_python/lib/python3.8/site-packages/wtforms/widgets/core.py[0m
    ‚ùØ‚ù± python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
          Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include
          unescaped HTML which could result in cross-site scripting. Ensure this data is not externally     
          controlled, or consider rewriting to not use 'Markup()'.                                          
          Details: https://sg.run/AvZ8                                                                      
                                                                                                            
          115‚îÜ return Markup("".join(html))
            ‚ãÆ‚îÜ----------------------------------------
          152‚îÜ return Markup("".join(html))
            ‚ãÆ‚îÜ----------------------------------------
          181‚îÜ return Markup("<input %s>" % self.html_params(name=field.name, **kwargs))
            ‚ãÆ‚îÜ----------------------------------------
          324‚îÜ return Markup(
          325‚îÜ     "<textarea %s>\r\n%s</textarea>"
          326‚îÜ     % (html_params(name=field.name, **kwargs), escape(field._value()))
          327‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          392‚îÜ return Markup("".join(html))
            ‚ãÆ‚îÜ----------------------------------------
          403‚îÜ return Markup(f"<option {html_params(**options)}>{escape(label)}</option>")

